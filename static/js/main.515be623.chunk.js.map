{"version":3,"sources":["api/api.js","redux/users-reducer.js","components/Users/EditForm.js","components/Users/EditDialog.js","components/Users/Posts.js","components/Users/UsersTable.js","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["GET_USERS","axios","Axios","create","baseURL","headers","usersApi","user","post","then","response","data","get","id","initialState","users","userForEdit","userPosts","listLoading","schema","yup","shape","name","required","username","email","street","suite","city","zipcode","lat","typeError","lng","phone","website","companyName","catchPhrase","bs","EditForm","updateUser","enableReinitialize","validationSchema","onSubmit","values","initialValues","handleSubmit","handleChange","handleBlur","touched","errors","Form","Group","Row","Col","Label","Control","type","plaseholder","value","onChange","onBlur","isValid","isInvalid","Feedback","xs","EditDialog","show","userId","onHide","useState","userLoading","setUserLoading","isSubmittimg","setSubmittimg","dispatch","useDispatch","useEffect","a","payload","catch","useSelector","state","Modal","size","animation","Header","closeButton","Body","Spinner","role","className","Footer","Button","form","variant","as","aria-hidden","onClick","Posts","userName","postsLoading","setPostsLoading","handleClose","posts","scrollable","map","Media","width","height","src","alt","title","body","UsersTable","showUser","setShowUser","showPosts","setShowPosts","setUserID","setUserName","shallowEqual","showEditForm","Card","Table","striped","responsive","borderless","hover","u","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","address","geo","company","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.515be623.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\nconst GET_USERS = '/users';\r\nconst GET_USER_POSTS = '/posts?userId='\r\n\r\nconst axios = Axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    headers: {\r\n        'Content-type': 'application/json; charset=UTF-8',\r\n    }\r\n});\r\n\r\nexport const usersApi ={\r\n    addUser(user){\r\n        return axios.post(GET_USERS, user)\r\n        .then(response => response.data);\r\n    },\r\n    updateUser(user){\r\n        return axios.post(GET_USERS, user)\r\n        .then(response => response.data);\r\n    },\r\n    getUsers(){\r\n        return axios.get(GET_USERS)\r\n        .then(response => response.data);\r\n    },\r\n    getUserById(id){\r\n        return axios.get(`${GET_USERS}/${id}`)\r\n        .then(response => response.data);\r\n    },\r\n    getUserPosts(id){\r\n        return axios.get(`${GET_USER_POSTS}${id}`)\r\n        .then(response => response.data);\r\n    }\r\n}","import { usersApi } from \"../api/api\"\r\n\r\nconst initialState = {\r\n    users:[],\r\n    userForEdit: null,\r\n    userPosts: [],\r\n    listLoading: false\r\n}\r\n\r\nexport default function usersReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case 'users/setUsers': {\r\n        return {\r\n          ...state,\r\n          users: action.payload,\r\n          listLoading: false\r\n        }\r\n      }\r\n      case 'users/setUserPosts': {\r\n        return {\r\n          ...state,\r\n          userPosts: action.payload\r\n        }\r\n      }\r\n      case 'users/setEditUser': {\r\n        return {\r\n          ...state,\r\n          userForEdit: {\r\n            id: action.payload.id,\r\n            name: action.payload.name,\r\n            username: action.payload.username,\r\n            email: action.payload.email,\r\n            suite: action.payload.address.suite,\r\n            city: action.payload.address.city,\r\n            street: action.payload.address.street,\r\n            zipcode: action.payload.address.zipcode,\r\n            lat: action.payload.address.geo.lat,\r\n            lng: action.payload.address.geo.lng,\r\n            phone: action.payload.phone,\r\n            website: action.payload.website,\r\n            companyName: action.payload.company.name,\r\n            catchPhrase: action.payload.company.catchPhrase,\r\n            bs: action.payload.company.bs,\r\n          },\r\n          listLoading: false\r\n        }\r\n      }\r\n      case 'users/clearEditUser': {\r\n        return {\r\n          ...state,\r\n          userForEdit: null\r\n        }\r\n      }\r\n      case 'users/clearPosts': {\r\n        return {\r\n          ...state,\r\n          userPosts: []\r\n        }\r\n      }\r\n      case 'users/setLoading': {\r\n          return{\r\n              ...state,\r\n              listLoading: action.payload\r\n          }\r\n      }\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nconst setUsers = (users) => ({type:'users/setUsers', payload: users})\r\nconst setEditUser = (user) => ({type:'users/setEditUser', payload: user})\r\nconst setUserPosts = (posts) => ({type:'users/setUserPosts', payload: posts})\r\nconst setLoading = (isLoading) => ({type:'users/setLoading', payload: isLoading})\r\nexport const clearEditUser = () => ({type:'users/clearEditUser'});\r\nexport const clearPosts = () => ({type:'users/clearPosts'});\r\n\r\nexport const requestUsers = () => async dispatch => {\r\n    dispatch(setLoading(true));\r\n    const response = await usersApi.getUsers();\r\n    dispatch(setUsers(response));\r\n}\r\n\r\nexport const requestUserById = (id) => async dispatch => {\r\n    const response = await usersApi.getUserById(id);\r\n    dispatch(setEditUser(response));\r\n}\r\n\r\nexport const requestUserPosts = (id) => async dispatch => {\r\n  const response = await usersApi.getUserPosts(id);\r\n  dispatch(setUserPosts(response));\r\n}","import { Formik } from 'formik';\r\nimport React from 'react';\r\nimport { Col, Form } from 'react-bootstrap';\r\nimport * as yup from 'yup';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Full name is required'),\r\n  username: yup.string().required('User name is required'),\r\n  email: yup.string().email('incorrect email!').required('Email is required'),\r\n  street: yup.string(),\r\n  suite: yup.string(),\r\n  city: yup.string().required('City is required'),\r\n  zipcode: yup.string(),\r\n  lat: yup.number().typeError('Latitude must be a number'),\r\n  lng: yup.number().typeError('Longitude must be a number'),\r\n  phone: yup.string().required('Phone is required'),\r\n  website: yup.string(),\r\n  companyName: yup.string().required('Company name is required'),\r\n  catchPhrase: yup.string(),\r\n  bs: yup.string()\r\n});\r\n\r\nexport default function EditForm({ updateUser, user }) {\r\n  return (\r\n    <Formik\r\n      enableReinitialize\r\n      validationSchema={schema}\r\n      onSubmit={values => {\r\n        updateUser(values);\r\n      }}\r\n      initialValues={user ?\r\n        {\r\n          name: user.name,\r\n          username: user.username,\r\n          email: user.email,\r\n          suite: user.suite,\r\n          city: user.city,\r\n          street: user.street,\r\n          zipcode: user.zipcode,\r\n          lat: user.lat,\r\n          lng: user.lng,\r\n          phone: user.phone,\r\n          website: user.website,\r\n          companyName: user.companyName,\r\n          catchPhrase: user.catchPhrase,\r\n          bs: user.bs\r\n        } : {\r\n          name: '',\r\n          username: '',\r\n          email: '',\r\n          suite: '',\r\n          city: '',\r\n          street: '',\r\n          zipcode: '',\r\n          lat: '',\r\n          lng: '',\r\n          phone: '',\r\n          website: '',\r\n          companyName: '',\r\n          catchPhrase: '',\r\n          bs: ''\r\n        }}\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        values,\r\n        touched,\r\n        errors,\r\n      }) => (\r\n        <Form id=\"UserEditForm\" onSubmit={handleSubmit}>\r\n          <h5>Main information</h5>\r\n          <Form.Group>\r\n            {/* NAME */}\r\n            <Form.Row>\r\n              <Col>\r\n                <Form.Label>Full Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  plaseholder=\"street\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.name && !errors.name}\r\n                  isInvalid={touched.name && errors.name}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.name}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* USER NAME */}\r\n              <Col>\r\n                <Form.Label>User Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  plaseholder=\"user name\"\r\n                  value={values.username}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.username && !errors.username}\r\n                  isInvalid={touched.username && errors.username}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.username}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* EMAIL */}\r\n              <Col>\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  plaseholder=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.email && !errors.email}\r\n                  isInvalid={touched.email && errors.email}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.email}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n          <h5>Address</h5>\r\n            <Form.Row>\r\n              {/* CITY */}\r\n              <Col >\r\n                <Form.Label>City</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"city\"\r\n                  plaseholder=\"city\"\r\n                  value={values.city}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.city && !errors.city}\r\n                  isInvalid={touched.city && errors.city}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.city}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* STREET */}\r\n              <Col>\r\n                <Form.Label>Street</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"street\"\r\n                  plaseholder=\"street\"\r\n                  value={values.street}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.street && !errors.street}\r\n                  isInvalid={touched.street && errors.street}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.street}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* SUITE */}\r\n              <Col>\r\n                <Form.Label>Suite</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"suite\"\r\n                  plaseholder=\"suite\"\r\n                  value={values.suite}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.suite && !errors.suite}\r\n                  isInvalid={touched.suite && errors.suite}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.suite}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n              {/* zipcode */}\r\n              <Col xs={2}>\r\n                <Form.Label>Zipcode</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"zipcode\"\r\n                  plaseholder=\"zipcode\"\r\n                  value={values.zipcode}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.zipcode && !errors.zipcode}\r\n                  isInvalid={touched.zipcode && errors.zipcode}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.zipcode}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* lat */}\r\n              <Col xs={2}>\r\n                <Form.Label>Latitude</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"lat\"\r\n                  plaseholder=\"lat\"\r\n                  value={values.lat}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.lat && !errors.lat}\r\n                  isInvalid={touched.lat && errors.lat}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.lat}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* lng */}\r\n              <Col xs={2}>\r\n                <Form.Label>Longitude</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"lng\"\r\n                  plaseholder=\"lng\"\r\n                  value={values.lng}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.lng && !errors.lng}\r\n                  isInvalid={touched.lng && errors.lng}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.lng}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* phone */}\r\n              <Col>\r\n                <Form.Label>Phone</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"phone\"\r\n                  plaseholder=\"phone\"\r\n                  value={values.phone}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.phone && !errors.phone}\r\n                  isInvalid={touched.phone && errors.phone}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.phone}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form.Group>\r\n\r\n          {/* company */}\r\n          <Form.Group>\r\n          <h5>Company</h5>\r\n            <Form.Row>\r\n              <Col>\r\n                <Form.Label>Company Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"companyName\"\r\n                  plaseholder=\"companyName\"\r\n                  value={values.companyName}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.companyName && !errors.companyName}\r\n                  isInvalid={touched.companyName && errors.companyName}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.companyName}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n              {/* catchPhrase */}\r\n              <Col>\r\n                <Form.Label>Company Catchphrase</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"catchPhrase\"\r\n                  plaseholder=\"catchPhrase\"\r\n                  value={values.catchPhrase}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.catchPhrase && !errors.catchPhrase}\r\n                  isInvalid={touched.catchPhrase && errors.catchPhrase}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.catchPhrase}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n            </Form.Row>\r\n            {/* bs */}\r\n            <Form.Row>\r\n              <Col>\r\n                <Form.Label>Company BS</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"bs\"\r\n                  plaseholder=\"bs\"\r\n                  value={values.bs}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  isValid={touched.bs && !errors.bs}\r\n                  isInvalid={touched.bs && errors.bs}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.bs}\r\n                </Form.Control.Feedback>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form.Group>\r\n\r\n          {/* website */}\r\n          <Form.Group>\r\n            <Form.Label>Website</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"website\"\r\n              plaseholder=\"website\"\r\n              value={values.website}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              isValid={touched.website && !errors.website}\r\n              isInvalid={touched.website && errors.website}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.website}\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n        </Form>)}\r\n    </Formik>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Modal, Spinner } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { usersApi } from '../../api/api';\r\nimport { requestUserById } from '../../redux/users-reducer';\r\nimport EditForm from './EditForm';\r\n\r\nexport default function EditDialog({ show, userId, onHide }) {\r\n\r\n    const [userLoading, setUserLoading] = useState(false);\r\n    const [isSubmittimg, setSubmittimg] = useState(false);\r\n\r\n    const updateUser = (values) => {\r\n        setSubmittimg(true);\r\n        // check if user ID exists. \r\n        // add new user if id = null\r\n        if (!values.id) {\r\n            usersApi.addUser(values).then(() => {\r\n                setSubmittimg(false);\r\n                onHide();\r\n            });\r\n        // update existing user if id != null\r\n        } else {\r\n            usersApi.updateUser(values).then(() => {\r\n                setSubmittimg(false);\r\n                onHide();\r\n            });\r\n        }\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        // load user info\r\n        if (userId) {\r\n            setUserLoading(true);\r\n            dispatch(requestUserById(userId))\r\n                .then(() => {\r\n                    setUserLoading(false);\r\n                })\r\n                .catch(() => {\r\n                    setUserLoading(false);\r\n                })\r\n        }\r\n    }, [userId, dispatch]);\r\n\r\n    const user = useSelector(state => state.users.userForEdit);\r\n\r\n    return (\r\n        <Modal size=\"lg\" show={show} animation={false} onHide={onHide}>\r\n            <Modal.Header closeButton >\r\n                {userId ? <h4>Edit user</h4> : <h4>Create new user</h4>}\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {userLoading\r\n                    ?\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                    :\r\n                    <EditForm user={user} updateUser={updateUser} />}\r\n            </Modal.Body>\r\n            <Modal.Footer >\r\n                <Button form=\"UserEditForm\" type=\"submit\" variant=\"primary\">\r\n                    {isSubmittimg && <Spinner\r\n                        className=\"mr-2\"\r\n                        as=\"span\"\r\n                        animation=\"border\"\r\n                        size=\"sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                    />}Save</Button>\r\n                <Button variant=\"secondary\" onClick={() => onHide()}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Media, Modal, Spinner } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearPosts, requestUserPosts } from '../../redux/users-reducer';\r\n\r\nexport default function Posts({ show, userId, userName, onHide }) {\r\n\r\n    const [postsLoading, setPostsLoading] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // clear posts on close\r\n    const handleClose = () => {\r\n        dispatch(clearPosts());\r\n        onHide();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            setPostsLoading(true);\r\n            dispatch(requestUserPosts(userId))\r\n                .then(() => {\r\n                    setPostsLoading(false);\r\n                })\r\n                .catch(() => {\r\n                    setPostsLoading(false);\r\n                })\r\n        }\r\n    }, [userId, dispatch]);\r\n\r\n    //select posts from store\r\n    const posts = useSelector(state => state.users.userPosts);\r\n\r\n    return (\r\n        <Modal size=\"lg\" show={show} animation={false} onHide={handleClose} scrollable>\r\n            <Modal.Header closeButton>\r\n                {userName && <h4>{userName} posts</h4>}\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {postsLoading\r\n                ?\r\n                <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n                :\r\n                posts.map(post => {\r\n                    return(\r\n                        <Media key={post.id}>\r\n                            <img\r\n                                width={64}\r\n                                height={64}\r\n                                className=\"mr-3\"\r\n                                src=\"https://dummyimage.com/64x64/000/fff.png&text=Post+Image\"\r\n                                alt=\"Generic placeholder\"\r\n                            />\r\n                            <Media.Body>\r\n                                <h5>ID:{post.id} \"{post.title}\"</h5>\r\n                                <p>{post.body}</p>\r\n                            </Media.Body>\r\n                        </Media>\r\n                    )\r\n                })}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => handleClose()}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}","import React, { useState } from 'react';\r\nimport { Button, Card, Spinner, Table } from 'react-bootstrap';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { clearEditUser } from '../../redux/users-reducer';\r\nimport EditDialog from './EditDialog';\r\nimport Posts from './Posts';\r\n\r\nexport default function UsersTable() {\r\n    const [showUser, setShowUser] = useState(false);\r\n    const [showPosts, setShowPosts] = useState(false);\r\n    const [userId, setUserID] = useState(null);\r\n    const [userName, setUserName] = useState(null);\r\n\r\n    //get users and loading condition from redux store\r\n    const { users, listLoading } = useSelector(state => ({\r\n        users: state.users.users,\r\n        listLoading: state.users.listLoading\r\n    }), shallowEqual);\r\n    const dispatch = useDispatch();\r\n\r\n    // clear old user fields on open edit user form\r\n    const showEditForm = (id) => {\r\n        if (id !== userId) {\r\n            dispatch(clearEditUser());\r\n            setUserID(id);\r\n        }\r\n        setShowUser(true);\r\n    }\r\n\r\n    // set user ID and name on open posts\r\n    const showUserPosts = (id, name) => {\r\n        if (id !== userId) {\r\n            setUserID(id);\r\n            setUserName(name)\r\n        }\r\n        setShowPosts(true);\r\n    }\r\n\r\n    const closeUserEdit = () => {\r\n        setShowUser(false);\r\n    }\r\n\r\n    const closeUserPosts = () => {\r\n        setShowPosts(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"glass\">\r\n            <Card.Header>\r\n                <div className=\"d-flex justify-content-between transparent\">\r\n                    <h4>Users table</h4>\r\n                    <Button variant=\"primary\" onClick={() => showEditForm(null)}> Create User </Button>\r\n                </div>\r\n            </Card.Header>\r\n            <Card.Body >\r\n                <div>\r\n                    {/* head section */}\r\n\r\n                    <div>\r\n                        {listLoading\r\n                            ?\r\n                            <Spinner animation=\"border\" role=\"status\">\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                            </Spinner>\r\n                            :\r\n                            <Table striped responsive=\"md\" borderless hover className=\"bg-transparent\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>#</th>\r\n                                        <th>Username</th>\r\n                                        <th>Name</th>\r\n                                        <th>Email</th>\r\n                                        <th>Actions</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {users.map(u => {\r\n                                        return (\r\n                                            <tr key={u.id}>\r\n                                                <td>{u.id}</td>\r\n                                                <td>{u.username}</td>\r\n                                                <td>{u.name}</td>\r\n                                                <td>{u.email}</td>\r\n                                                <td className=\"text-nowrap\">\r\n                                                    <Button variant=\"primary mr-2\" onClick={() => showEditForm(u.id)}> Edit </Button>\r\n                                                    <Button variant=\"info\" onClick={() => showUserPosts(u.id, u.username)}> Posts </Button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </Table>\r\n                        }\r\n                        {/* Edit / Create user and Posts Modal windows  */}\r\n                        {showUser && <EditDialog show={showUser} userId={userId} onHide={closeUserEdit} />}\r\n                        {showPosts && <Posts show={showPosts} userId={userId} userName={userName} onHide={closeUserPosts} />}\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n            <Card.Footer className=\"transparent\">\r\n                simple react redux demo\r\n          </Card.Footer>\r\n        </div>\r\n    )\r\n}","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { requestUsers } from './redux/users-reducer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport UsersTable from './components/Users/UsersTable';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n  //request users on first load\n  useEffect(() => {\n    dispatch(requestUsers());\n  },[dispatch]);\n\n  return (\n      <div className=\"App\">\n        <ul className=\"bg-bubbles\">\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n        </ul>\n        <UsersTable />\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport usersReducer from './users-reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n  users: usersReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}